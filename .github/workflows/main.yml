# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  CI: true

jobs:
  build:
    
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-16.04,ubuntu-18.04, ubuntu-20.04, macos-latest, macos-11.0]

    steps:
      - uses: actions/checkout@v2
      

      - name: cfitsio
        if: runner.os !='Linux'
        run: brew install  cfitsio  libmagic
 
      - name: Get opencv
        uses: actions/checkout@v2
        with:
          repository: opencv/opencv
          path: opencv
          token: ${{ github.token }}
          ref: ${{secrets.OPENCV_VERSION}}

      # (eigen?), matrix build, checkout CMakeList.txt in .../static
      - name: Build opencv
        run: |
          cd opencv
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DWITH_QUIRC=OFF -DBUILD_PROTOBUF=OFF -DWITH_OPENJPEG=OFF -DWITH_OPENEXR=OFF -DWITH_EIGEN=OFF -DBUILD_LIST=core,highgui,improc -DOPENCV_GENERATE_PKGCONFIG=ON -DWITH_WEBP=OFF -DWITH_JASPER=OFF -DWITH_V4L=OFF -DWITH_GSTREAMER=OFF -DWITH_MSMF=OFF -DWITH_AVFOUNDATION=OFF -DWITH_DSHOW=OFF -DWITH_WITH_1394=OFF -DVIDEOIO_ENABLE_PLUGINS=OFF -DOPENCV_DNN_OPENCL=OFF -DBUILD_JAVA=OFF -DOPENCV_GENERATE_PKGCONFIG=ON  -DWITH_FFMPEG=OFF ..
          make
          sudo make install
        
      - name: Get cfitsio
        if: runner.os =='Linux'
        uses: actions/checkout@v2
        with:
          repository: healpy/cfitsio
          path: cfitsio
          token: ${{ github.token }}
          ref: 'master' #${{secrets.CFITSIO_VERSION}}
        
      - name: Build cfitsio
        if: runner.os =='Linux'
        run: |
          cd cfitsio
          cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -Wno-error=dev -Wno-error=implicit-function-declaration -DCURL_FOUND=NO .
          make
          sudo make install
  

      - name: Get exiv2
#        if: steps.cache-opencv.outputs.cache-hit != 'true'
#        if: runner.os !='Linux'       
        uses: actions/checkout@v2
        with:
          repository: Exiv2/exiv2
          path: exiv2
          token: ${{ github.token }}
          ref: ${{secrets.EXIV2_VERSION}}

      # (eigen?), matrix build, checkout CMakeList.txt in .../static
      - name: Build exiv2
#        if: runner.os !='Linux'
#        if: steps.cache-opencv.outputs.cache-hit != 'true'
        run: |
          cd exiv2
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DEXIV2_ENABLE_NLS=OFF -DEXIV2_BUILD_SAMPLES=OFF  -DEXIV2_ENABLE_XMP=OFF .. 
          cmake --build .
          sudo make install
          

      - name: j3AstroIO
        env:
          CI: true
        run: |
          mkdir -p build
          cd build
          cmake ../ci
          make
          make package
 
      - name: unpack mac
        if: runner.os !='Linux'
        run: tar xzvf build/j3AstroIO-1.0.0-Darwin.tar.gz

      - name: unpack linux
        if: runner.os =='Linux' 
        run: tar xzvf build/j3AstroIO-1.0.0-Linux.tar.gz

      - name: archive results max
        if: runner.os !='Linux' 
        uses: actions/upload-artifact@v1
        with:
          name: j3AstroIO-1.0.0-${{ matrix.os }}
          path: j3AstroIO-1.0.0-Darwin

      - name: archive results linux
        if:  runner.os =='Linux' 
        uses: actions/upload-artifact@v1
        with:
          name: j3AstroIO-1.0.0-${{ matrix.os }}
          path: j3AstroIO-1.0.0-${{ runner.os }}
 
